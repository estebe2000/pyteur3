{"version":3,"file":"assets/684.918f519dd69140140c1d.js","mappings":"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","sources":["webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-ocaml/lib/worker.js","webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-ocaml/lib/comlink-worker.js"],"sourcesContent":["import { KernelWorkerBase } from \"@basthon/kernel-base/worker\";\n// convert any canvas to a blob (async)\nconst toBlob = async (canvas, type) => {\n    if (canvas instanceof globalThis.OffscreenCanvas) {\n        return await canvas.convertToBlob({ type });\n    }\n    else {\n        return await new Promise((resolve, reject) => {\n            canvas.toBlob((blob) => {\n                if (blob == null)\n                    reject();\n                else\n                    resolve(blob);\n            }, type);\n        });\n    }\n};\nexport class OCamlKernelWorker extends KernelWorkerBase {\n    constructor(options) {\n        // do not forget to call the parent constructor\n        super(options);\n        this._initInnerCode = `\\\nopen Js_of_ocaml\nmodule Basthon = struct\n  let download (path: string): unit = ignore((Js.Unsafe.eval_string \"self.basthon.__kernel__\")##download path)\n  let sleep (duration: float): unit = ignore((Js.Unsafe.eval_string \"self.basthon\")##sleep duration)\n  let create_canvas () = (Js.Unsafe.eval_string \"self.basthon.__kernel__\")##createcanvas()\n  let display_canvas canvas: unit = ignore((Js.Unsafe.eval_string \"self.basthon\")##displayCanvas canvas)\n  let save_canvas canvas (path: string): unit = ignore((Js.Unsafe.eval_string \"self.basthon.__kernel__\")##savecanvas canvas path)\n  let download_canvas ?(format = \"png\") canvas: unit = ignore((Js.Unsafe.eval_string \"self.basthon\")##downloadCanvas canvas (Js.string format))\n  let display_image (path: string): unit = ignore((Js.Unsafe.eval_string \"self.basthon.__kernel__\")##displayimage path)\n  let version () : string = (Js.Unsafe.eval_string \"self.basthon.__kernel__\")##version()\n  let help () : unit = print_endline {ext|\\\nBasthon module\n  help:               Show this help.\n  download path:      Download a file from the local filesystem.\n  sleep duration:     Sleep for a certain amount of seconds.\n  display_image path: Display a PNG image from the local filesystem.\n  create_canvas:      Create a HTML5 canvas to be displayed with display_canvas.\n  display_canvas canvas:   Display a HTML5 canvas created with create_canvas.\n  save_canvas canvas path: Save a canvas to a PNG/JPG file to the local filesystem.\n  download_canvas ?(format = \"png\") canvas: Download a canvas to a PNG/JPG file.\n|ext}\nend`;\n    }\n    language() {\n        return \"ocaml\";\n    }\n    /*\n     * Initialize the kernel.\n     */\n    async _init(options) {\n        // io redirections\n        console.info = (...args) => console.log(...args);\n        console.warn = (...args) => console.error(...args);\n        globalThis.addEventListener(\"error\", (e) => console.error(e.toString()));\n        // kernel loading\n        const { __kernel__ } = await import(\"./__kernel__\");\n        this.__kernel__ = __kernel__;\n        if (this.__kernel__?.init?.() !== 0)\n            throw new Error(\"Can't start OCaml kernel!\");\n        // mock Graphics_js.draw_image for use in worker\n        // see https://github.com/ocsigen/js_of_ocaml/blob/1c43da9a925a9df247548158879439ef4039eb38/runtime/graphics.js#L442\n        self.jsoo_runtime.caml_gr_draw_image = (im, x, y) => {\n            const s = self.jsoo_runtime.caml_gr_state_get();\n            s.context.putImageData(im, x, s.height - im.height - y);\n            return 0;\n        };\n        // execute magic init code\n        this.__kernel__?.exec(this._initInnerCode);\n    }\n    async _eval(data, code) {\n        if (this.__kernel__ == null)\n            return;\n        this.__eval_data__ = data;\n        this.__kernel__.io.stdout = (...args) => {\n            this.sendStdoutStream(data, args.join(\" \"));\n        };\n        this.__kernel__.io.stderr = (...args) => {\n            this.sendStderrStream(data, args.join(\" \"));\n        };\n        const result = this.__kernel__?.exec(code);\n        if (typeof result === \"string\" && result.length > 0)\n            return { \"text/plain\": result.replace(/\\n$/, \"\") };\n        return undefined;\n    }\n    /**\n     * Special case of starting a legacy kernel.\n     */\n    async legacyStart() {\n        if (this.__kernel__?.init?.() !== 0)\n            throw new Error(\"Can't start OCaml kernel!\");\n        // execute magic init code\n        this.__kernel__?.exec(this._initInnerCode);\n    }\n    /**\n     * Special case of stoping a legacy kernel.\n     */\n    async legacyStop() { }\n    /**\n     * Is the source ready to be evaluated or want we more?\n     * Usefull to set ps1/ps2 in teminal prompt.\n     */\n    async more(code) {\n        return false;\n    }\n    /**\n     * Put a file on the local (emulated) filesystem.\n     */\n    putFile(filename, content) {\n        if (this.__kernel__ == null)\n            return;\n        this.__kernel__.createfile(filename, content);\n    }\n    /**\n     * Put an importable module on the local (emulated) filesystem\n     * and load dependencies.\n     */\n    putModule(filename, content) {\n        this.putFile(filename, content);\n        /* why is this needed?\n         * even if path is already added using the #directory directive,\n         * one should recall the directive each time the folder is modified...\n         */\n        this.__kernel__?.loadmodule(filename);\n    }\n    /**\n     * OCaml wrapper arround Kernel.download (to be called by __kernel__.ml).\n     */\n    ocamlDownload(content, filename) {\n        const array = self.jsoo_runtime.caml_convert_bytes_to_array(content);\n        this.download(array, filename);\n    }\n    /**\n     * Send eval.display event with the given canvas\n     * and ocaml-canvas as display_type.\n     */\n    displayCanvas(canvas) {\n        this.display(canvas);\n    }\n    /**\n     * Save a canvas to a file on the local FS.\n     */\n    async saveCanvas(canvas, path) {\n        if (this.__kernel__ == null)\n            return;\n        const ext = path.split(\".\").pop()?.toLowerCase();\n        let mime = \"image/png\";\n        if (ext === \"jpg\" || ext === \"jpeg\")\n            mime = \"image/jpeg\";\n        const promise = (async () => {\n            const blob = await toBlob(canvas, mime);\n            const content = await blob.arrayBuffer();\n            this.__kernel__.createfile(path, content);\n        })();\n        this.addEvalPromise(promise);\n        await promise;\n    }\n    /**\n     * Download a canvas as an image file (png or jpg).\n     */\n    async downloadCanvas(canvas, format) {\n        if (format == null)\n            format = \"png\";\n        //@ts-ignore\n        format = format.toString().toLowerCase();\n        const types = { jpg: \"image/jpeg\", jpeg: \"images/jpeg\", png: \"image/png\" };\n        if (!(format in types))\n            format = \"png\";\n        const mime = types[format];\n        const promise = (async () => {\n            const blob = await toBlob(canvas, mime);\n            let image = await this.blobToDataURL(blob);\n            // image = image.replace(mime, \"image/octet-stream\");\n            this.download(image, `canvas.${format}`);\n        })();\n        this.addEvalPromise(promise);\n        await promise;\n    }\n    /**\n     * Display a PNG image.\n     */\n    async displayImage(content) {\n        const data = this.clone(this.__eval_data__);\n        const array = self.jsoo_runtime.caml_convert_bytes_to_array(content);\n        const blob = new Blob([array], { type: \"image/png\" });\n        const promise = this.displayBlob(blob, data);\n        this.addEvalPromise(promise);\n        await promise;\n    }\n}\n","import { expose } from \"@basthon/kernel-base/worker\";\nimport { OCamlKernelWorker } from \"./worker\";\nexpose(OCamlKernelWorker);\n"],"names":["toBlob","async","canvas","type","globalThis","OffscreenCanvas","convertToBlob","Promise","resolve","reject","blob","OCamlKernelWorker","constructor","options","super","this","_initInnerCode","language","_init","console","info","args","log","warn","error","addEventListener","e","toString","__kernel__","init","Error","self","jsoo_runtime","caml_gr_draw_image","im","x","y","s","caml_gr_state_get","context","putImageData","height","exec","_eval","data","code","__eval_data__","io","stdout","sendStdoutStream","join","stderr","sendStderrStream","result","length","replace","legacyStart","legacyStop","more","putFile","filename","content","createfile","putModule","loadmodule","ocamlDownload","array","caml_convert_bytes_to_array","download","displayCanvas","display","saveCanvas","path","ext","split","pop","toLowerCase","mime","promise","arrayBuffer","addEvalPromise","downloadCanvas","format","types","jpg","jpeg","png","image","blobToDataURL","displayImage","clone","Blob","displayBlob"],"sourceRoot":""}