{"version":3,"file":"assets/973.5c1fb05a4b610f8cb678.js","mappings":"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","sources":["webpack://@basthon/basthon-console/./node_modules/ace-builds/src-noconflict/mode-sql.js"],"sourcesContent":["ace.define(\"ace/mode/sql_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar SqlHighlightRules = function () {\n    var keywords = (\"select|insert|update|delete|from|where|and|or|group|by|order|limit|offset|having|as|case|\" +\n        \"when|then|else|end|type|left|right|join|on|outer|desc|asc|union|create|table|primary|key|if|\" +\n        \"foreign|not|references|default|null|inner|cross|natural|database|drop|grant|distinct|is|in|\" +\n        \"all|alter|any|array|at|authorization|between|both|cast|check|collate|column|commit|constraint|\" +\n        \"cube|current|current_date|current_time|current_timestamp|current_user|describe|escape|except|\" +\n        \"exists|external|extract|fetch|filter|for|full|function|global|grouping|intersect|interval|\" +\n        \"into|leading|like|local|no|of|only|out|overlaps|partition|position|range|revoke|rollback|rollup|\" +\n        \"row|rows|session_user|set|some|start|tablesample|time|to|trailing|truncate|unique|unknown|\" +\n        \"user|using|values|window|with\");\n    var builtinConstants = (\"true|false\");\n    var builtinFunctions = (\"avg|count|first|last|max|min|sum|ucase|lcase|mid|len|round|rank|now|format|\" +\n        \"coalesce|ifnull|isnull|nvl\");\n    var dataTypes = (\"int|numeric|decimal|date|varchar|char|bigint|float|double|bit|binary|text|set|timestamp|\" +\n        \"money|real|number|integer|string\");\n    var keywordMapper = this.createKeywordMapper({\n        \"support.function\": builtinFunctions,\n        \"keyword\": keywords,\n        \"constant.language\": builtinConstants,\n        \"storage.type\": dataTypes\n    }, \"identifier\", true);\n    this.$rules = {\n        \"start\": [{\n                token: \"comment\",\n                regex: \"--.*$\"\n            }, {\n                token: \"comment\",\n                start: \"/\\\\*\",\n                end: \"\\\\*/\"\n            }, {\n                token: \"string\", // \" string\n                regex: '\".*?\"'\n            }, {\n                token: \"string\", // ' string\n                regex: \"'.*?'\"\n            }, {\n                token: \"string\", // ` string (apache drill)\n                regex: \"`.*?`\"\n            }, {\n                token: \"constant.numeric\", // float\n                regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token: \"keyword.operator\",\n                regex: \"\\\\+|\\\\-|\\\\/|\\\\/\\\\/|%|<@>|@>|<@|&|\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"[\\\\(]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\)]\"\n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }]\n    };\n    this.normalizeRules();\n};\noop.inherits(SqlHighlightRules, TextHighlightRules);\nexports.SqlHighlightRules = SqlHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/folding/sql\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/cstyle\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./cstyle\").FoldMode;\nvar FoldMode = exports.FoldMode = function () { };\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/sql\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/sql_highlight_rules\",\"ace/mode/folding/sql\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar SqlHighlightRules = require(\"./sql_highlight_rules\").SqlHighlightRules;\nvar SqlFoldMode = require(\"./folding/sql\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = SqlHighlightRules;\n    this.foldingRules = new SqlFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.$id = \"ace/mode/sql\";\n    this.snippetFileId = \"ace/snippets/sql\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/sql\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"names":["ace","define","require","exports","module","oop","TextHighlightRules","SqlHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","start","end","normalizeRules","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","SqlFoldMode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id","snippetFileId"],"sourceRoot":""}