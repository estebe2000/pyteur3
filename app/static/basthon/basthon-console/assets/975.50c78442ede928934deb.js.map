{"version":3,"file":"assets/975.50c78442ede928934deb.js","mappings":"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","sources":["webpack://@basthon/basthon-console/./node_modules/ace-builds/src-noconflict/mode-python.js"],"sourcesContent":["ace.define(\"ace/mode/python_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/*\n * TODO: python delimiters\n */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar PythonHighlightRules = function () {\n    var keywords = (\"and|as|assert|break|class|continue|def|del|elif|else|except|exec|\" +\n        \"finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|\" +\n        \"raise|return|try|while|with|yield|async|await|nonlocal\");\n    var builtinConstants = (\"True|False|None|NotImplemented|Ellipsis|__debug__\");\n    var builtinFunctions = (\"abs|divmod|input|open|staticmethod|all|enumerate|int|ord|str|any|\" +\n        \"eval|isinstance|pow|sum|basestring|execfile|issubclass|print|super|\" +\n        \"binfile|bin|iter|property|tuple|bool|filter|len|range|type|bytearray|\" +\n        \"float|list|raw_input|unichr|callable|format|locals|reduce|unicode|\" +\n        \"chr|frozenset|long|reload|vars|classmethod|getattr|map|repr|xrange|\" +\n        \"cmp|globals|max|reversed|zip|compile|hasattr|memoryview|round|\" +\n        \"__import__|complex|hash|min|apply|delattr|help|next|setattr|set|\" +\n        \"buffer|dict|hex|object|slice|coerce|dir|id|oct|sorted|intern|\" +\n        \"ascii|breakpoint|bytes\");\n    var keywordMapper = this.createKeywordMapper({\n        \"invalid.deprecated\": \"debugger\",\n        \"support.function\": builtinFunctions,\n        \"variable.language\": \"self|cls\",\n        \"constant.language\": builtinConstants,\n        \"keyword\": keywords\n    }, \"identifier\");\n    var strPre = \"[uU]?\";\n    var strRawPre = \"[rR]\";\n    var strFormatPre = \"[fF]\";\n    var strRawFormatPre = \"(?:[rR][fF]|[fF][rR])\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n    this.$rules = {\n        \"start\": [{\n                token: \"comment\",\n                regex: \"#.*$\"\n            }, {\n                token: \"string\", // multi line \"\"\" string start\n                regex: strPre + '\"{3}',\n                next: \"qqstring3\"\n            }, {\n                token: \"string\", // \" string\n                regex: strPre + '\"(?=.)',\n                next: \"qqstring\"\n            }, {\n                token: \"string\", // multi line ''' string start\n                regex: strPre + \"'{3}\",\n                next: \"qstring3\"\n            }, {\n                token: \"string\", // ' string\n                regex: strPre + \"'(?=.)\",\n                next: \"qstring\"\n            }, {\n                token: \"string\",\n                regex: strRawPre + '\"{3}',\n                next: \"rawqqstring3\"\n            }, {\n                token: \"string\",\n                regex: strRawPre + '\"(?=.)',\n                next: \"rawqqstring\"\n            }, {\n                token: \"string\",\n                regex: strRawPre + \"'{3}\",\n                next: \"rawqstring3\"\n            }, {\n                token: \"string\",\n                regex: strRawPre + \"'(?=.)\",\n                next: \"rawqstring\"\n            }, {\n                token: \"string\",\n                regex: strFormatPre + '\"{3}',\n                next: \"fqqstring3\"\n            }, {\n                token: \"string\",\n                regex: strFormatPre + '\"(?=.)',\n                next: \"fqqstring\"\n            }, {\n                token: \"string\",\n                regex: strFormatPre + \"'{3}\",\n                next: \"fqstring3\"\n            }, {\n                token: \"string\",\n                regex: strFormatPre + \"'(?=.)\",\n                next: \"fqstring\"\n            }, {\n                token: \"string\",\n                regex: strRawFormatPre + '\"{3}',\n                next: \"rfqqstring3\"\n            }, {\n                token: \"string\",\n                regex: strRawFormatPre + '\"(?=.)',\n                next: \"rfqqstring\"\n            }, {\n                token: \"string\",\n                regex: strRawFormatPre + \"'{3}\",\n                next: \"rfqstring3\"\n            }, {\n                token: \"string\",\n                regex: strRawFormatPre + \"'(?=.)\",\n                next: \"rfqstring\"\n            }, {\n                token: \"keyword.operator\",\n                regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|@|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n            }, {\n                token: \"punctuation\",\n                regex: \",|:|;|\\\\->|\\\\+=|\\\\-=|\\\\*=|\\\\/=|\\\\/\\\\/=|%=|@=|&=|\\\\|=|^=|>>=|<<=|\\\\*\\\\*=\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"[\\\\[\\\\(\\\\{]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\]\\\\)\\\\}]\"\n            }, {\n                token: [\"keyword\", \"text\", \"entity.name.function\"],\n                regex: \"(def|class)(\\\\s+)([\\\\u00BF-\\\\u1FFF\\\\u2C00-\\\\uD7FF\\\\w]+)\"\n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }, {\n                include: \"constants\"\n            }],\n        \"qqstring3\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\", // multi line \"\"\" string end\n                regex: '\"{3}',\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"qstring3\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\", // multi line ''' string end\n                regex: \"'{3}\",\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"qqstring\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\",\n                regex: \"\\\\\\\\$\",\n                next: \"qqstring\"\n            }, {\n                token: \"string\",\n                regex: '\"|$',\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"qstring\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\",\n                regex: \"\\\\\\\\$\",\n                next: \"qstring\"\n            }, {\n                token: \"string\",\n                regex: \"'|$\",\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"rawqqstring3\": [{\n                token: \"string\", // multi line \"\"\" string end\n                regex: '\"{3}',\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"rawqstring3\": [{\n                token: \"string\", // multi line ''' string end\n                regex: \"'{3}\",\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"rawqqstring\": [{\n                token: \"string\",\n                regex: \"\\\\\\\\$\",\n                next: \"rawqqstring\"\n            }, {\n                token: \"string\",\n                regex: '\"|$',\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"rawqstring\": [{\n                token: \"string\",\n                regex: \"\\\\\\\\$\",\n                next: \"rawqstring\"\n            }, {\n                token: \"string\",\n                regex: \"'|$\",\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"fqqstring3\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\", // multi line \"\"\" string end\n                regex: '\"{3}',\n                next: \"start\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"{\",\n                push: \"fqstringParRules\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"fqstring3\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\", // multi line ''' string end\n                regex: \"'{3}\",\n                next: \"start\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"{\",\n                push: \"fqstringParRules\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"fqqstring\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\",\n                regex: \"\\\\\\\\$\",\n                next: \"fqqstring\"\n            }, {\n                token: \"string\",\n                regex: '\"|$',\n                next: \"start\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"{\",\n                push: \"fqstringParRules\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"fqstring\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\",\n                regex: \"'|$\",\n                next: \"start\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"{\",\n                push: \"fqstringParRules\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"rfqqstring3\": [{\n                token: \"string\", // multi line \"\"\" string end\n                regex: '\"{3}',\n                next: \"start\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"{\",\n                push: \"fqstringParRules\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"rfqstring3\": [{\n                token: \"string\", // multi line ''' string end\n                regex: \"'{3}\",\n                next: \"start\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"{\",\n                push: \"fqstringParRules\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"rfqqstring\": [{\n                token: \"string\",\n                regex: \"\\\\\\\\$\",\n                next: \"rfqqstring\"\n            }, {\n                token: \"string\",\n                regex: '\"|$',\n                next: \"start\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"{\",\n                push: \"fqstringParRules\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"rfqstring\": [{\n                token: \"string\",\n                regex: \"'|$\",\n                next: \"start\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"{\",\n                push: \"fqstringParRules\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"fqstringParRules\": [{\n                token: \"paren.lparen\",\n                regex: \"[\\\\[\\\\(]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\]\\\\)]\"\n            }, {\n                token: \"string\",\n                regex: \"\\\\s+\"\n            }, {\n                token: \"string\",\n                regex: \"'[^']*'\"\n            }, {\n                token: \"string\",\n                regex: '\"[^\"]*\"'\n            }, {\n                token: \"function.support\",\n                regex: \"(!s|!r|!a)\"\n            }, {\n                include: \"constants\"\n            }, {\n                token: 'paren.rparen',\n                regex: \"}\",\n                next: 'pop'\n            }, {\n                token: 'paren.lparen',\n                regex: \"{\",\n                push: \"fqstringParRules\"\n            }],\n        \"constants\": [{\n                token: \"constant.numeric\", // imaginary\n                regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n            }, {\n                token: \"constant.numeric\", // float\n                regex: floatNumber\n            }, {\n                token: \"constant.numeric\", // long integer\n                regex: integer + \"[lL]\\\\b\"\n            }, {\n                token: \"constant.numeric\", // integer\n                regex: integer + \"\\\\b\"\n            }, {\n                token: [\"punctuation\", \"function.support\"], // method\n                regex: \"(\\\\.)([a-zA-Z_]+)\\\\b\"\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }]\n    };\n    this.normalizeRules();\n};\noop.inherits(PythonHighlightRules, TextHighlightRules);\nexports.PythonHighlightRules = PythonHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/pythonic\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, match.index);\n            if (match[2])\n                return this.indentationBlock(session, row, match.index + match[2].length);\n            return this.indentationBlock(session, row);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/python\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/python_highlight_rules\",\"ace/mode/folding/pythonic\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PythonHighlightRules = require(\"./python_highlight_rules\").PythonHighlightRules;\nvar PythonFoldMode = require(\"./folding/pythonic\").FoldMode;\nvar Range = require(\"../range\").Range;\nvar Mode = function () {\n    this.HighlightRules = PythonHighlightRules;\n    this.foldingRules = new PythonFoldMode(\"\\\\:\");\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"#\";\n    this.$pairQuotesAfter = {\n        \"'\": /[ruf]/i,\n        '\"': /[ruf]/i\n    };\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n        return indent;\n    };\n    var outdents = {\n        \"pass\": 1,\n        \"return\": 1,\n        \"raise\": 1,\n        \"break\": 1,\n        \"continue\": 1\n    };\n    this.checkOutdent = function (state, line, input) {\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\n            return false;\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n        if (!tokens)\n            return false;\n        do {\n            var last = tokens.pop();\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\n        if (!last)\n            return false;\n        return (last.type == \"keyword\" && outdents[last.value]);\n    };\n    this.autoOutdent = function (state, doc, row) {\n        row += 1;\n        var indent = this.$getIndent(doc.getLine(row));\n        var tab = doc.getTabString();\n        if (indent.slice(-tab.length) == tab)\n            doc.remove(new Range(row, indent.length - tab.length, row, indent.length));\n    };\n    this.$id = \"ace/mode/python\";\n    this.snippetFileId = \"ace/snippets/python\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/python\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"names":["ace","define","require","exports","module","oop","TextHighlightRules","PythonHighlightRules","keywordMapper","this","createKeywordMapper","strPre","strRawPre","strFormatPre","strRawFormatPre","integer","intPart","pointFloat","floatNumber","stringEscape","$rules","token","regex","next","include","defaultToken","push","normalizeRules","inherits","BaseFoldMode","FoldMode","markers","foldingStartMarker","RegExp","getFoldWidgetRange","session","foldStyle","row","match","getLine","openingBracketBlock","index","indentationBlock","length","call","prototype","TextMode","Mode","PythonFoldMode","Range","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$pairQuotesAfter","getNextLineIndent","state","line","tab","indent","$getIndent","tokens","getTokenizer","getLineTokens","type","outdents","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","$id","snippetFileId","m"],"sourceRoot":""}