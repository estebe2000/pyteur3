{"version":3,"file":"assets/4031.906af7c79a38328b80c5.js","mappings":"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","sources":["webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-python3/lib/worker.js","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-python3/lib/comlink-worker.js"],"sourcesContent":["import { KernelWorkerBase, loadScript } from \"@basthon/kernel-base/worker\";\nconst PYODIDE_VERSION = \"0.23.2\";\nexport class Python3KernelWorker extends KernelWorkerBase {\n    constructor(options) {\n        // do not forget to call the parent constructor\n        super(options);\n        /**\n         * Where to find pyodide.js (private).\n         */\n        this._pyodideURLs = [\n            `https://cdn.jsdelivr.net/pyodide/v{PYODIDE_VERSION}/full/pyodide.js`,\n        ];\n        this.__kernel__ = null;\n        this.pythonVersion = \"\";\n        // for locally installed Pyodide\n        this._pyodideURLs.unshift(`${this.basthonRoot()}/pyodide/pyodide.js`);\n        this._pyodideURLs = options?.pyodideURLs ?? this._pyodideURLs;\n    }\n    language() {\n        return \"python3\";\n    }\n    /**\n     * Get the URL of Basthon modules dir.\n     */\n    basthonModulesRoot() {\n        return this.basthonRoot() + \"/modules\";\n    }\n    /**\n     * What to do when loaded (private).\n     */\n    async _onload() {\n        const pyodide = self.pyodide;\n        // reformat repodata\n        const packages = pyodide._api.repodata_packages;\n        for (let p of Object.keys(packages)) {\n            const item = packages[p];\n            item.file_name = item.file_name.replace(\"{basthonRoot}\", this.basthonRoot());\n        }\n        // get the version of Python from Python\n        this.pythonVersion = pyodide.runPython(\"import platform ; platform.python_version()\");\n        // load basthon and get kernel\n        await pyodide.loadPackage(\"basthon\");\n        this.__kernel__ = pyodide.pyimport(\"basthon\").__kernel__;\n        this.__kernel__.start();\n    }\n    /*\n     * Initialize the kernel.\n     */\n    async _init() {\n        let pyodideURL = this._pyodideURLs[0];\n        for (let url of this._pyodideURLs) {\n            url = url.replace(\"{PYODIDE_VERSION}\", PYODIDE_VERSION);\n            try {\n                const response = await fetch(url, { method: \"HEAD\" });\n                if (response.ok) {\n                    pyodideURL = url;\n                    break;\n                }\n            }\n            catch (e) { }\n        }\n        try {\n            await loadScript(pyodideURL);\n        }\n        catch (error) {\n            console.log(error);\n            console.error(\"Can't load pyodide.js\");\n            throw error;\n        }\n        if (self.loadPyodide == null) {\n            console.log(\"self.loadPyodide is null!\");\n            throw new Error(\"Can't load pyodide.js\");\n        }\n        try {\n            // loading with custom repodata.json\n            self.pyodide = await self.loadPyodide({\n                lockFileURL: this.basthonRoot() + \"/repodata.json\",\n            });\n        }\n        catch (error) {\n            console.log(error);\n            console.error(\"Can't load Python from Pyodide\");\n            throw error;\n        }\n        await this._onload();\n    }\n    /**\n     * Execution count getter overload.\n     */\n    get execution_count() {\n        return this.__kernel__.execution_count();\n    }\n    /**\n     * Basthon async code evaluation function.\n     */\n    async _eval(data, code) {\n        const outCallback = (msg) => this.sendStdoutStream(data, msg);\n        const errCallback = (msg) => this.sendStderrStream(data, msg);\n        // dependencies are loaded by eval\n        const proxy = await this.__kernel__.eval(code, outCallback, errCallback, data);\n        // when an error occures, proxy should be the error message\n        if (!(proxy instanceof self.pyodide.ffi.PyProxy))\n            throw proxy;\n        const res = proxy.toJs({\n            create_proxies: false,\n            dict_converter: Object.fromEntries,\n        });\n        proxy.destroy();\n        return res[0];\n    }\n    /**\n     * Special case of starting a legacy kernel.\n     */\n    async legacyStart() {\n        this.__kernel__.start();\n    }\n    /**\n     * Special case of stoping a legacy kernel.\n     */\n    async legacyStop() {\n        this.__kernel__.stop();\n    }\n    /**\n     * Complete a code at the end (usefull for tab completion).\n     *\n     * Returns an array of two elements: the list of completions\n     * and the start index.\n     */\n    async complete(code) {\n        const proxy = this.__kernel__.complete(code);\n        if (!(proxy instanceof self.pyodide.ffi.PyProxy))\n            return proxy;\n        const res = proxy.toJs();\n        proxy.destroy();\n        return res;\n    }\n    /**\n     * Is the source ready to be evaluated or want we more?\n     * Usefull to set ps1/ps2 for teminal prompt.\n     */\n    async more(source) {\n        return this.__kernel__.more(source);\n    }\n    /**\n     * List content of directory (Python's virtual FS).\n     */\n    readdir(path) {\n        return self.pyodide._module.FS.readdir(path);\n    }\n    /**\n     * Change current directory (Python's virtual FS).\n     */\n    chdir(path) {\n        self.pyodide._module.FS.chdir(path);\n    }\n    /**\n     * Create directory (Python's virtual FS).\n     */\n    mkdir(path) {\n        self.pyodide._module.FS.mkdir(path);\n    }\n    /**\n     * Put a file on the local (emulated) filesystem.\n     */\n    async putFile(filename, content) {\n        this.__kernel__.put_file(filename, content);\n    }\n    /**\n     * Get a file content from the VFS.\n     */\n    async getFile(path) {\n        return this.__kernel__.get_file(path).toJs();\n    }\n    /**\n     * Put an importable module on the local (emulated) filesystem\n     * and load dependencies.\n     */\n    async putModule(filename, content) {\n        return await this.__kernel__.put_module(filename, content);\n    }\n    /**\n     * Get a user module file content.\n     */\n    async getUserModuleFile(filename) {\n        return this.__kernel__.get_user_module_file(filename).toJs();\n    }\n    /**\n     * List modules launched via putModule.\n     */\n    async userModules() {\n        const proxy = this.__kernel__.user_modules();\n        if (!(proxy instanceof self.pyodide.ffi.PyProxy))\n            return proxy;\n        const res = proxy.toJs();\n        proxy.destroy();\n        return res;\n    }\n    /**\n     * Display a matplotlib kernel iframe from its html code.\n     */\n    async displayMatplotlibIFrame(iframeHTML) {\n        const port = this.displayKernelIFrame(iframeHTML);\n        port.onmessage = (event) => {\n            console.log(\"Kernel Worker says: 'Message received from iframe: \" +\n                event.data +\n                \"'\");\n            port.postMessage(\"hello from kernel worker\");\n        };\n    }\n}\n","import { expose } from \"@basthon/kernel-base/worker\";\nimport { Python3KernelWorker } from \"./worker\";\nexpose(Python3KernelWorker);\n"],"names":["Python3KernelWorker","constructor","options","super","this","_pyodideURLs","__kernel__","pythonVersion","unshift","basthonRoot","pyodideURLs","language","basthonModulesRoot","_onload","pyodide","self","packages","_api","repodata_packages","p","Object","keys","item","file_name","replace","runPython","loadPackage","pyimport","start","_init","pyodideURL","url","fetch","method","ok","e","error","console","log","loadPyodide","Error","lockFileURL","execution_count","_eval","data","code","proxy","eval","msg","sendStdoutStream","sendStderrStream","ffi","PyProxy","res","toJs","create_proxies","dict_converter","fromEntries","destroy","legacyStart","legacyStop","stop","complete","more","source","readdir","path","_module","FS","chdir","mkdir","putFile","filename","content","put_file","getFile","get_file","putModule","put_module","getUserModuleFile","get_user_module_file","userModules","user_modules","displayMatplotlibIFrame","iframeHTML","port","displayKernelIFrame","onmessage","event","postMessage"],"sourceRoot":""}