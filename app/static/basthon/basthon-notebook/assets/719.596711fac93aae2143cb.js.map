{"version":3,"file":"assets/719.596711fac93aae2143cb.js","mappings":"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","sources":["webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-base/lib/commons.js","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-base/lib/kernel.js","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-base/lib/version.js","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-echo/lib/kernel.js"],"sourcesContent":["/**\n * An error thrown by not implemented API functions.\n */\nclass NotImplementedError extends Error {\n    constructor(funcName) {\n        super(`Function ${funcName} not implemented!`);\n        this.name = \"NotImplementedError\";\n    }\n}\n/**\n * Convert an Uint8Array to a data URL.\n */\nconst toDataURL = async (content) => {\n    return await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            resolve(reader.result);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(new Blob([content]));\n    });\n};\n/* fetch from local FS */\nconst fetchFromLocalFS = async (localfsScheme, url) => {\n    const prefix = localfsScheme;\n    const path = url.slice(prefix.length);\n    let content = null;\n    const options = {\n        status: 200,\n        statusText: \"OK\",\n        headers: new Headers(),\n    };\n    try {\n        //@ts-ignore\n        content = await self.basthon.getFile(path);\n        const dataURL = await toDataURL(content);\n        const mime = dataURL.substring(dataURL.indexOf(\":\") + 1, dataURL.indexOf(\";\"));\n        content = content.buffer;\n        options.headers.append(\"Content-Type\", mime);\n        options.headers.append(\"Content-Length\", content.byteLength);\n    }\n    catch (e) {\n        options.status = 404;\n        options.statusText = \"Not Found\";\n    }\n    return new Response(content, options);\n};\n/**\n * Get the origin of an url.\n */\nconst origin = (url) => new URL(url).origin;\n/**\n * Get the parent path of an url.\n */\nconst parent = (url) => {\n    const abs = new URL(url).href;\n    return abs.substring(0, abs.lastIndexOf(\"/\"));\n};\n/**\n * we mock the fetch function to:\n *  - redirect queries to local FS\n *  - bypass the worker's opaque origin\n */\nconst mockFetch = (legacy) => {\n    // already mocked?\n    if (self.fetch.name === \"mockedFetch\")\n        return;\n    const trueFetch = self.fetch;\n    const assetsURL = self._assetsURL;\n    async function mockedFetch(request, init) {\n        // build new request from init\n        request = new Request(request, init);\n        const url = request.url;\n        const localfsScheme = \"filesystem:/\";\n        // in legacy mode, only local FS is mocked\n        if (legacy) {\n            if (url.startsWith(localfsScheme))\n                return await fetchFromLocalFS(localfsScheme, url);\n            return await trueFetch(request);\n        }\n        // not a true worker? -> error\n        if (self.importScripts == null || assetsURL == null)\n            return Response.error();\n        // non-legacy mode (true isolated secure worker)\n        // ensure credentials are not sent\n        request = new Request(request, { credentials: \"omit\" });\n        try {\n            // requests towards localfs\n            if (url.startsWith(localfsScheme)) {\n                return await fetchFromLocalFS(localfsScheme, url);\n            }\n            else if (origin(url) === origin(assetsURL)) {\n                // requests towards same origin\n                // only url under the assets folder are proxyied\n                if (parent(url).startsWith(assetsURL)) {\n                    const proxy = self._remoteProxy;\n                    const { body, options } = await proxy.fetch(request);\n                    return new Response(body, options);\n                }\n                throw new Error(\"Ressource is outside the proxy' scope\");\n            }\n            return await trueFetch(request);\n        }\n        catch (e) {\n            console.error(`security proxy: request to ${url} throw error: ${e.toString()}`);\n            return Response.error();\n        }\n    }\n    self.fetch = mockedFetch;\n};\n/**\n * mock Worker to support sandboxing and keep webpack compatibility\n */\nconst mockWorker = () => {\n    // already mocked?\n    if (globalThis.Worker.name === \"SandboxedWorker\")\n        return;\n    class SandboxedWorker extends Worker {\n        constructor(url, options) {\n            if (options?.sandboxed === true) {\n                const absURL = new URL(url).href;\n                const assetsURL = absURL.substring(0, absURL.lastIndexOf(\"/\"));\n                // worker created with a 'data' url scheme has opaque origin\n                // https://html.spec.whatwg.org/multipage/workers.html#script-settings-for-workers:concept-origin-opaque\n                const workerScript = `\n           self._assetsURL = \"${assetsURL}\";\n           globalThis = {importScripts: self.importScripts, location: \"${url}\"};\n           importScripts(\"${url}\");\n           globalThis = self;\n        `.replace(/\\s/g, \"\");\n                super(`data:text/javascript;base64,${btoa(workerScript)}`);\n            }\n            else {\n                super(url, options);\n            }\n        }\n    }\n    globalThis.Worker = SandboxedWorker;\n};\n/**\n * we mock '(new Image()).src' = to support local fs access\n */\nconst mockHTMLImageSrc = () => {\n    // inside main thread?\n    if (globalThis?.HTMLImageElement == null)\n        return;\n    const desc = Object.getOwnPropertyDescriptor(HTMLImageElement.prototype, \"src\");\n    // already mocked?\n    if (desc?.set?.name === \"mockedSrcSet\")\n        return;\n    function mockedSrcSet(e) {\n        const prefix = \"filesystem:/\";\n        if (e.startsWith(prefix)) {\n            const path = e.slice(prefix.length);\n            (async () => {\n                //@ts-ignore\n                const content = (await globalThis.Basthon?.getFile?.(path))?.buffer;\n                desc?.set?.call(this, await toDataURL(content));\n            })();\n        }\n        else {\n            desc?.set?.call(this, e);\n        }\n    }\n    Object.defineProperty(HTMLImageElement.prototype, \"src\", {\n        ...desc,\n        get: function () {\n            return desc?.get?.call(this);\n        },\n        set: mockedSrcSet,\n    });\n};\nexport { NotImplementedError, mockFetch, mockWorker, mockHTMLImageSrc };\n","import { PromiseDelegate } from \"promise-delegate\";\nimport { VERSION } from \"./version\";\nimport { NotImplementedError } from \"./commons\";\n/**\n * Event for Basthon's dispatch/listen.\n */\nclass BasthonEvent extends Event {\n    constructor(id, data) {\n        super(id);\n        this.detail = data;\n    }\n}\nexport { VERSION };\n/**\n * API that any Basthon kernel should fill to be supported\n * in console/notebook.\n */\nexport class KernelBase {\n    constructor(options) {\n        this._isReady = false;\n        this._ready = new PromiseDelegate();\n        this._stopped = Promise.resolve();\n        this._execution_count = 0;\n        this._pendingInput = undefined;\n        // a map to register wrapped listeners to allow later remove\n        this._listeners = new Map();\n        this._files = new Map();\n        this._modules = new Map();\n        this._options = this.clone(options);\n        // root path where kernel is installed\n        this._rootPath = options.rootPath;\n    }\n    /**\n     * Is this kernel safe? (loaded from an isolated web worker)\n     */\n    safeKernel() {\n        return false;\n    }\n    /**\n     * Kernel version number (string).\n     */\n    version() {\n        return VERSION;\n    }\n    /**\n     * Language implemented in the kernel (string).\n     * Generally lower case.\n     */\n    language() {\n        throw new NotImplementedError(\"language\");\n    }\n    /**\n     * Language name implemented in the kernel (string).\n     * As it should be displayed in text.\n     */\n    languageName() {\n        throw new NotImplementedError(\"languageName\");\n    }\n    /**\n     * Script (module) file extensions\n     */\n    moduleExts() {\n        throw new NotImplementedError(\"moduleExts\");\n    }\n    /**\n     * Execution count getter.\n     */\n    get execution_count() {\n        return this._execution_count;\n    }\n    /**\n     * Async code evaluation that resolves with the result.\n     */\n    evalAsync(code, outCallback, errCallback, data = null) {\n        throw new NotImplementedError(\"evalAsync\");\n    }\n    async putFile(filename, content) {\n        this._files.set(filename, content);\n    }\n    async putModule(filename, content) {\n        this._modules.set(filename, content);\n    }\n    async userModules() {\n        return [];\n    }\n    /**\n     * Get a file content from the VFS.\n     */\n    async getFile(path) {\n        throw new NotImplementedError(\"getFile\");\n    }\n    /**\n     * Get a user module file content.\n     */\n    async getUserModuleFile(filename) {\n        throw new NotImplementedError(\"getUserModuleFile\");\n    }\n    async more(source) {\n        throw new NotImplementedError(\"more\");\n    }\n    async complete(code) {\n        return [];\n    }\n    banner() {\n        return `Welcome to the ${this.languageName()} REPL!`;\n    }\n    ps1() {\n        return \">>> \";\n    }\n    ps2() {\n        return \"... \";\n    }\n    /**\n     * Launch the kernel (used to wrap a promise around init).\n     */\n    async _init() { }\n    /**\n     * Initialize the kernel and start it.\n     */\n    async init() {\n        if (!this.safeKernel())\n            console.warn(`%c⚠ DANGER ⚠: this kernel is not safe!` +\n                \" Please consider using a safe kernel.\", \"color: red; font-size: 20px;\");\n        try {\n            await this._init();\n        }\n        catch (error) {\n            this._ready.reject(error);\n            throw error;\n        }\n        // connecting eval to basthon.eval.request event.\n        this.addEventListener(\"eval.request\", this.evalFromEvent.bind(this));\n        await this.start();\n    }\n    /**\n     * Start the kernel (used to wrap a promise around start).\n     */\n    async _start() { }\n    /**\n     * Start the kernel.\n     */\n    async start() {\n        await this._stopped;\n        this._execution_count = 0;\n        try {\n            await this._start();\n        }\n        catch (error) {\n            this._ready.reject(error);\n            throw error;\n        }\n        this._files.forEach((v, k) => this.putFile(k, v));\n        this._modules.forEach((v, k) => this.putModule(k, v));\n        this._isReady = true;\n        this._ready.resolve();\n    }\n    /**\n     * Perform async part of the stoping process.\n     */\n    async _stop() { }\n    /**\n     * Stop the kernel synchronously (to ensure kernel is stopped after the call).\n     */\n    stop() {\n        this._isReady = false;\n        this._ready = new PromiseDelegate();\n        this._stopped = this._stop();\n    }\n    /**\n     * Restart the kernel (stop and start).\n     * Use await this.ready() to ensure kernel is started\n     */\n    restart() {\n        this.stop(); // sync\n        this.start(); // async\n    }\n    /**\n     * Is the kernel ready?\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * Promise that resolves when the kernel is ready (started).\n     */\n    async ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Root path for assets files.\n     */\n    assetsURL(absolute = false) {\n        let url = this._rootPath;\n        if (absolute && !url.startsWith(\"http\")) {\n            const base = window.location.origin + window.location.pathname;\n            url = base.substring(0, base.lastIndexOf(\"/\")) + \"/\" + url;\n        }\n        return url;\n    }\n    /**\n     * Root for kernel files. This is always the language directory\n     * inside the version number directory inside the assets directory.\n     */\n    basthonRoot(absolute = false) {\n        return (this.assetsURL(absolute) + \"/\" + this.version() + \"/\" + this.language());\n    }\n    /**\n     * Downloading data (bytes array or data URL) as filename\n     * (opening browser dialog).\n     */\n    download(data, filename) {\n        if (!(typeof data === \"string\" || data instanceof String)) {\n            const blob = new Blob([data], { type: \"application/octet-stream\" });\n            data = window.URL.createObjectURL(blob);\n        }\n        const anchor = document.createElement(\"a\");\n        anchor.download = filename;\n        anchor.href = data;\n        anchor.target = \"_blank\";\n        anchor.style.display = \"none\"; // just to be safe!\n        document.body.appendChild(anchor);\n        anchor.click();\n        document.body.removeChild(anchor);\n    }\n    /**\n     * Wrapper around document.dispatchEvent.\n     * It adds the 'basthon.' prefix to each event name and\n     * manage the event lookup to retreive relevent data.\n     */\n    dispatchEvent(eventName, data) {\n        document.dispatchEvent(new BasthonEvent(`basthon.${eventName}`, data));\n    }\n    /**\n     * Wrapper around document.addEventListener.\n     * It manages the 'basthon.' prefix to each event name and\n     * manage the event lookup to retreive relevent data.\n     */\n    addEventListener(eventName, callback) {\n        // wrapped callback\n        const _callback = (event) => callback(event.detail);\n        document.addEventListener(`basthon.${eventName}`, _callback);\n        // register the wrapped callback in order to remove it\n        let listeners = this._listeners.get(eventName);\n        if (listeners == null) {\n            listeners = new Map();\n            this._listeners.set(eventName, listeners);\n        }\n        listeners.set(callback, _callback);\n    }\n    /**\n     * Wrapper around document.removeEventListener.\n     * It manages the 'basthon.' prefix to each event name.\n     */\n    removeEventListener(eventName, callback) {\n        // get the wrapped callback\n        const listeners = this._listeners.get(eventName);\n        document.removeEventListener(`basthon.${eventName}`, listeners?.get(callback));\n    }\n    /**\n     * Send eval.input event then wait for the user response and return it.\n     */\n    async inputAsync(prompt, password = false, data = undefined) {\n        data = this.clone(data);\n        data.content = { prompt, password };\n        const pd = new PromiseDelegate();\n        data.resolve = pd.resolve.bind(pd);\n        data.reject = pd.reject.bind(pd);\n        this._pendingInput = pd;\n        this.dispatchEvent(\"eval.input\", data);\n        const res = await pd.promise;\n        this._pendingInput = undefined;\n        return res;\n    }\n    /**\n     * Close a pending input.\n     */\n    resolvePendingInput() {\n        this._pendingInput?.resolve(\"\");\n    }\n    /**\n     * Simple clone via JSON copy.\n     */\n    clone(obj) {\n        // simple trick that is enough for our purpose.\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /**\n     * Put a ressource (file or module).\n     * Detection is based on extension.\n     */\n    async putRessource(filename, content) {\n        const ext = filename.split(\".\").pop() ?? \"\";\n        if (this.moduleExts().includes(ext)) {\n            return await this.putModule(filename, content);\n        }\n        else {\n            return await this.putFile(filename, content);\n        }\n    }\n    /**\n     * Is an input pending?\n     */\n    pendingInput() {\n        return this._pendingInput != null;\n    }\n    /**\n     * Internal. Code evaluation after an eval.request event.\n     */\n    async evalFromEvent(data) {\n        const stdCallback = (std) => (text) => {\n            let dataEvent = this.clone(data);\n            dataEvent.stream = std;\n            dataEvent.content = text;\n            this.dispatchEvent(\"eval.output\", dataEvent);\n        };\n        const outCallback = stdCallback(\"stdout\");\n        const errCallback = stdCallback(\"stderr\");\n        let args;\n        try {\n            args = await this.evalAsync(data.code, outCallback, errCallback, data);\n        }\n        catch (error) {\n            errCallback(error.toString());\n            const dataEvent = this.clone(data);\n            dataEvent.error = error;\n            dataEvent.execution_count = this.execution_count;\n            this.dispatchEvent(\"eval.error\", dataEvent);\n            return;\n        }\n        if (args == null)\n            return; // this should not happend\n        const result = args[0];\n        const executionCount = args[1];\n        let dataEvent = this.clone(data);\n        dataEvent.execution_count = executionCount;\n        if (result != null)\n            dataEvent.result = result;\n        this.dispatchEvent(\"eval.finished\", dataEvent);\n    }\n}\n","export const VERSION = \"0.73.5\";\n","import { KernelBase } from \"@basthon/kernel-base\";\nexport class EchoKernel extends KernelBase {\n    constructor(options) {\n        super(options);\n    }\n    language() {\n        return \"echo\";\n    }\n    languageName() {\n        return \"Echo\";\n    }\n    moduleExts() {\n        return [];\n    }\n    ps1() {\n        return \"echo> \";\n    }\n    ps2() {\n        return \"...> \";\n    }\n    async more(source) {\n        return false;\n    }\n    async evalAsync(code, outCallback, errCallback, data = null) {\n        data.interactive = true;\n        this._execution_count++;\n        outCallback(code + \"\\n\");\n        return [undefined, this._execution_count];\n    }\n}\n"],"names":["NotImplementedError","Error","constructor","funcName","super","this","name","toDataURL","async","content","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","Blob","fetchFromLocalFS","localfsScheme","url","prefix","path","slice","length","options","status","statusText","headers","Headers","self","basthon","getFile","dataURL","mime","substring","indexOf","buffer","append","byteLength","e","Response","origin","URL","mockFetch","legacy","fetch","trueFetch","assetsURL","_assetsURL","request","init","Request","startsWith","importScripts","error","credentials","abs","href","lastIndexOf","parent","proxy","_remoteProxy","body","console","toString","mockWorker","globalThis","Worker","SandboxedWorker","sandboxed","absURL","workerScript","replace","btoa","mockHTMLImageSrc","HTMLImageElement","desc","Object","getOwnPropertyDescriptor","prototype","set","defineProperty","get","call","Basthon","BasthonEvent","Event","id","data","detail","KernelBase","_isReady","_ready","_stopped","_execution_count","_pendingInput","undefined","_listeners","Map","_files","_modules","_options","clone","_rootPath","rootPath","safeKernel","version","language","languageName","moduleExts","execution_count","evalAsync","code","outCallback","errCallback","putFile","filename","putModule","userModules","getUserModuleFile","more","source","complete","banner","ps1","ps2","_init","warn","addEventListener","evalFromEvent","bind","start","_start","forEach","v","k","_stop","stop","restart","isReady","ready","promise","absolute","base","window","location","pathname","basthonRoot","download","String","blob","type","createObjectURL","anchor","document","createElement","target","style","display","appendChild","click","removeChild","dispatchEvent","eventName","callback","_callback","event","listeners","removeEventListener","inputAsync","prompt","password","pd","res","resolvePendingInput","obj","JSON","parse","stringify","putRessource","ext","split","pop","includes","pendingInput","stdCallback","std","text","dataEvent","stream","args","executionCount","VERSION","EchoKernel","interactive"],"sourceRoot":""}