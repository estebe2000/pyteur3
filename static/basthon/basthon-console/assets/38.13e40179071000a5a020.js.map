{"version":3,"file":"assets/38.13e40179071000a5a020.js","mappings":"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","sources":["webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-base/lib/worker/kernel-main.js","webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-ocaml/lib/kernel.js"],"sourcesContent":["import { wrap, createEndpoint, transfer } from \"comlink\";\nimport { NotImplementedError, mockWorker, mockHTMLImageSrc } from \"../commons\";\nimport { KernelBase } from \"../kernel\";\nimport { PromiseDelegate } from \"promise-delegate\";\n// mock Worker to support sandboxing and keep webpack compatibility\nmockWorker();\n// mock HTMLImageElement.src to support localfs access\nmockHTMLImageSrc();\nexport class KernelMainBase extends KernelBase {\n    constructor(options) {\n        super(options);\n        // synchronise comlink and communication channels\n        this._channelSyncer = new PromiseDelegate();\n        this._encrypt = (s) => s;\n        this._legacy = options?.legacy === true;\n        // synchronous wait on SAB cannot be used in a legacy context\n        // (atomic wait will block the main thread)\n        if (!this.isLegacy()) {\n            if (globalThis.crossOriginIsolated)\n                this._sab = new SharedArrayBuffer(1024);\n            else\n                this._fallbackKey = globalThis.crypto.randomUUID();\n        }\n    }\n    /**\n     * Is this a legacy worker? i.e. not runing in a worker.\n     */\n    isLegacy() {\n        return this._legacy;\n    }\n    /**\n     * Is synchrnous communication with worker available?\n     * (through SharedArrayBuffer atomic waits)\n     */\n    syncCommSupport() {\n        return this._sab != null;\n    }\n    /**\n     * Is this kernel safe? (loaded in an isolated web worker)\n     */\n    safeKernel() {\n        return !this.isLegacy();\n    }\n    /**\n     * Get a new worker (should be overloaded).\n     */\n    newWorker() {\n        throw new NotImplementedError(\"newWorker\");\n    }\n    /**\n     * Import the code for a legacy worker (running in the main thread).\n     */\n    async importLegacyWorker() {\n        throw new NotImplementedError(\"importLegacyWorker\");\n    }\n    /**\n     * Create the kernel webworker and setup communication.\n     */\n    async setupWorker() {\n        const comlinkChannel = new MessageChannel();\n        if (this.isLegacy()) {\n            // running in main thread via message channel (fake worker)\n            //@ts-ignore\n            self._commPort = comlinkChannel.port1;\n            // this global variable will be removed by worker\n            self._assetsURL = this.assetsURL(true);\n            await this.importLegacyWorker();\n        }\n        else {\n            // setup the kernel worker\n            const worker = this.newWorker();\n            // send communication port\n            worker.postMessage(comlinkChannel.port1, [comlinkChannel.port1]);\n            this._worker = worker;\n        }\n        const KernelWorker = wrap(comlinkChannel.port2);\n        // why typescript complains about this call? yet, this is advertised in\n        // https://github.com/GoogleChromeLabs/comlink/blob/dffe9050f63b1b39f30213adeb1dd4b9ed7d2594/docs/examples/03-classes-example/index.html#L15\n        //@ts-ignore\n        this._remote = await new KernelWorker(this._options);\n        // setup the communication channel\n        const { port1, port2 } = new MessageChannel();\n        port2.onmessage = (e) => this.processWorkerMessage(e.data);\n        this.postMessageToWorker = port2.postMessage.bind(port2);\n        await this.remote?.setCommPort(transfer(port1, [port1]));\n        // WARNING: without the setCommPort call, KernelWorker (proxy)\n        // is garbage collected and comlink releases the proxy,\n        // breaking all the communications... (don't know really why)\n        // If you experience this, just keep a ref on the proxy with e.g.\n        // this.PROXY = KernelWorker\n    }\n    /**\n     * Start the worker.\n     */\n    async _start() {\n        await super._start();\n        // kernel restart in legacy mode is lazy, not a full restart\n        if (this.isLegacy() && this.remote != null) {\n            await this.remote?.legacyStart();\n            return;\n        }\n        // setup the proxy worker\n        const proxyWorker = new Worker(new URL(\"./comlink-proxy.js\", import.meta.url));\n        const proxy = wrap(proxyWorker);\n        // setup the kernel worker\n        await this.setupWorker();\n        if (this.syncCommSupport()) {\n            console.log(\"Using SharedArrayBuffer for synchronous worker communication.\");\n            await this._remote?.setSAB(this._sab);\n        }\n        else if (this._fallbackKey != null) {\n            console.warn(\"SharedArrayBuffer not available, falling back to \" +\n                \"using third-party server for synchronous worker communication.\");\n            const pass = globalThis.crypto.randomUUID();\n            await this.remote?.setFallbackKeyAndPass(this._fallbackKey, pass);\n            const AES = await import(\"crypto-js/aes\");\n            this._encrypt = (message) => AES.encrypt(message, pass).toString();\n        }\n        // bind ports\n        const port = await proxy[createEndpoint]();\n        await this.remote?.setProxyPort(transfer(port, [port]));\n        // init remote\n        await this.remote?.init();\n    }\n    /**\n     * Comlink remote getter.\n     */\n    get remote() {\n        return this._remote;\n    }\n    /**\n     * Stop the worker.\n     */\n    async _stop() {\n        if (this.isLegacy()) {\n            await this.remote?.legacyStop();\n        }\n        else {\n            this._worker?.terminate();\n            this._worker = undefined;\n            this._remote = undefined;\n        }\n        await super._stop();\n    }\n    /**\n     * Process messages from worker (if any).\n     */\n    async processWorkerMessage(msg) {\n        switch (msg.type) {\n            case \"eval-end\":\n                this._channelSyncer.resolve();\n                this._channelSyncer = new PromiseDelegate();\n                break;\n            case \"stream\":\n                const { stream, text } = msg.content;\n                const dataEvent = this.clone(msg.data);\n                dataEvent.stream = stream;\n                dataEvent.content = text;\n                this.dispatchEvent(\"eval.output\", dataEvent);\n                break;\n            case \"download\":\n                const { content, filename } = msg.content;\n                this.download(content, filename);\n                break;\n            case \"display\":\n                if (msg.data?.display_type === \"dom-node\") {\n                    // we should be in legacy mode here\n                    if (!this.isLegacy())\n                        throw new Error(\"internal error\");\n                    const id = msg.data?.content;\n                    //@ts-ignore\n                    msg.data.content = await self.basthon?.popDOMNode(id);\n                }\n                this.dispatchEvent(\"eval.display\", msg.data);\n                break;\n            case \"clear_output\":\n                this.dispatchEvent(\"eval.clear-output\", msg.data);\n                break;\n            case \"input\":\n                const { prompt, password, data } = msg.content;\n                const res = (await this.inputAsync(prompt, password, data));\n                if (msg.content.toplevel === true) {\n                    this.postMessageToWorker({\n                        type: \"toplevel-input\",\n                        content: res,\n                        data,\n                    });\n                }\n                else if (this.syncCommSupport()) {\n                    const encodedRes = new TextEncoder().encode(res);\n                    new Uint8Array(this._sab).set(encodedRes.subarray(0, this._sab.byteLength));\n                    Atomics.notify(new Int32Array(this._sab), 0, 1);\n                }\n                else {\n                    const response = await fetch(\"https://api.basthon.fr/ephemeral\", {\n                        method: \"POST\",\n                        headers: {\n                            \"X-API-Referer\": self.location.href,\n                        },\n                        body: JSON.stringify({\n                            action: \"post\",\n                            key: this._fallbackKey,\n                            payload: this._encrypt(res),\n                        }),\n                    });\n                    if (!response.ok)\n                        throw new Error(`Basthon's network API error: ${response.status}`);\n                }\n                break;\n            case \"breakpoint-move-on\":\n                //@ts-ignore\n                const notebook = Jupyter?.notebook;\n                const msg_id = msg.content.data?.parent_msg?.header?.msg_id;\n                const index = notebook?.last_msg_id_to_cell_index?.(msg_id);\n                notebook?.next_breakpoint_cell?.(index);\n                break;\n            default: // ignoring (probably a comlink message)\n        }\n    }\n    async evalAsync(code, outCallback, errCallback, data = null) {\n        // force interactivity in all modes\n        data.interactive = true;\n        this._execution_count++;\n        // to be sure we do not miss communications\n        const syncChannels = this._channelSyncer.promise;\n        // evaluation\n        const execResult = (await this.remote?.eval(data, code));\n        // wait for all communications to end\n        await syncChannels;\n        // return result\n        let result;\n        switch (execResult?.status) {\n            case \"ok\":\n                result = execResult.result;\n                break;\n            case \"error\":\n                break;\n        }\n        return [result, this._execution_count];\n    }\n    /**\n     * Put a file on the local (emulated) filesystem.\n     */\n    async putFile(filename, content) {\n        await super.putFile(filename, content);\n        await this.remote?.putFile(filename, content);\n    }\n    /**\n     * Put an importable module on the local (emulated) filesystem\n     * and load dependencies.\n     */\n    async putModule(filename, content) {\n        await super.putModule(filename, content);\n        await this.remote?.putModule(filename, content);\n    }\n    /**\n     * Complete a code at the end (usefull for tab completion).\n     *\n     * Returns an array of two elements: the list of completions\n     * and the start index.\n     */\n    async complete(code) {\n        return (await this.remote?.complete(code)) ?? [];\n    }\n    /**\n     * Tell wether we should wait for more code or if it can\n     * be run as is.\n     *\n     * Useful to set ps1/ps2 in console prompt.\n     */\n    async more(code) {\n        return (await this.remote?.more(code)) ?? false;\n    }\n}\n","import { KernelMainBase } from \"@basthon/kernel-base/worker\";\n/**\n * An OCaml kernel that satisfies Basthon's API.\n */\nexport class OCamlKernel extends KernelMainBase {\n    constructor(options) {\n        super(options);\n    }\n    newWorker() {\n        return new Worker(new URL(\"./comlink-worker.js\", import.meta.url), {\n            //@ts-ignore\n            sandboxed: true, // removing this line will cause security issues\n        });\n    }\n    async importLegacyWorker() {\n        await import(\"./comlink-worker.js\");\n    }\n    language() {\n        return \"ocaml\";\n    }\n    languageName() {\n        return \"OCaml\";\n    }\n    moduleExts() {\n        return [\"ml\"];\n    }\n    /**\n     * List modules launched via putModule.\n     */\n    async userModules() {\n        return [];\n    }\n    /**\n     * Download a file from the VFS.\n     */\n    async getFile(path) {\n        return new Uint8Array([]);\n    }\n    /**\n     * Download a user module file.\n     */\n    async getUserModuleFile(filename) {\n        return new Uint8Array([]);\n    }\n    /**\n     * Mimic the OCaml's REPL banner.\n     */\n    banner() {\n        return \"        OCaml version 4.11.1\\n\";\n    }\n    ps1() {\n        return \"# \";\n    }\n    ps2() {\n        return \"  \";\n    }\n}\n"],"names":["KernelMainBase","constructor","options","super","this","_channelSyncer","PromiseDelegate","_encrypt","s","_legacy","legacy","isLegacy","globalThis","crossOriginIsolated","_sab","SharedArrayBuffer","_fallbackKey","crypto","randomUUID","syncCommSupport","safeKernel","newWorker","importLegacyWorker","setupWorker","comlinkChannel","MessageChannel","self","_commPort","port1","_assetsURL","assetsURL","worker","postMessage","_worker","KernelWorker","port2","_remote","_options","onmessage","e","processWorkerMessage","data","postMessageToWorker","bind","remote","setCommPort","_start","legacyStart","proxyWorker","Worker","URL","proxy","console","log","setSAB","warn","pass","setFallbackKeyAndPass","AES","message","encrypt","toString","port","setProxyPort","init","_stop","legacyStop","terminate","undefined","msg","type","resolve","stream","text","content","dataEvent","clone","dispatchEvent","filename","download","display_type","Error","id","basthon","popDOMNode","prompt","password","res","inputAsync","toplevel","encodedRes","TextEncoder","encode","Uint8Array","set","subarray","byteLength","Atomics","notify","Int32Array","response","fetch","method","headers","location","href","body","JSON","stringify","action","key","payload","ok","status","notebook","Jupyter","msg_id","parent_msg","header","index","last_msg_id_to_cell_index","next_breakpoint_cell","evalAsync","code","outCallback","errCallback","interactive","_execution_count","syncChannels","promise","execResult","eval","result","putFile","putModule","complete","more","OCamlKernel","sandboxed","language","languageName","moduleExts","userModules","getFile","path","getUserModuleFile","banner","ps1","ps2"],"sourceRoot":""}