{"version":3,"file":"assets/577.5b10c005bcaeaf71279d.js","mappings":"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","sources":["webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-base/lib/commons.js","webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-base/lib/worker/kernel-worker.js","webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-base/lib/worker/worker-utils.js"],"sourcesContent":["/**\n * An error thrown by not implemented API functions.\n */\nclass NotImplementedError extends Error {\n    constructor(funcName) {\n        super(`Function ${funcName} not implemented!`);\n        this.name = \"NotImplementedError\";\n    }\n}\n/**\n * Convert an Uint8Array to a data URL.\n */\nconst toDataURL = async (content) => {\n    return await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            resolve(reader.result);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(new Blob([content]));\n    });\n};\n/* fetch from local FS */\nconst fetchFromLocalFS = async (localfsScheme, url) => {\n    const prefix = localfsScheme;\n    const path = url.slice(prefix.length);\n    let content = null;\n    const options = {\n        status: 200,\n        statusText: \"OK\",\n        headers: new Headers(),\n    };\n    try {\n        //@ts-ignore\n        content = await self.basthon.getFile(path);\n        const dataURL = await toDataURL(content);\n        const mime = dataURL.substring(dataURL.indexOf(\":\") + 1, dataURL.indexOf(\";\"));\n        content = content.buffer;\n        options.headers.append(\"Content-Type\", mime);\n        options.headers.append(\"Content-Length\", content.byteLength);\n    }\n    catch (e) {\n        options.status = 404;\n        options.statusText = \"Not Found\";\n    }\n    return new Response(content, options);\n};\n/**\n * Get the origin of an url.\n */\nconst origin = (url) => new URL(url).origin;\n/**\n * Get the parent path of an url.\n */\nconst parent = (url) => {\n    const abs = new URL(url).href;\n    return abs.substring(0, abs.lastIndexOf(\"/\"));\n};\n/**\n * we mock the fetch function to:\n *  - redirect queries to local FS\n *  - bypass the worker's opaque origin\n */\nconst mockFetch = (legacy) => {\n    // already mocked?\n    if (self.fetch.name === \"mockedFetch\")\n        return;\n    const trueFetch = self.fetch;\n    const assetsURL = self._assetsURL;\n    async function mockedFetch(request, init) {\n        // build new request from init\n        request = new Request(request, init);\n        const url = request.url;\n        const localfsScheme = \"filesystem:/\";\n        // in legacy mode, only local FS is mocked\n        if (legacy) {\n            if (url.startsWith(localfsScheme))\n                return await fetchFromLocalFS(localfsScheme, url);\n            return await trueFetch(request);\n        }\n        // not a true worker? -> error\n        if (self.importScripts == null || assetsURL == null)\n            return Response.error();\n        // non-legacy mode (true isolated secure worker)\n        // ensure credentials are not sent\n        request = new Request(request, { credentials: \"omit\" });\n        try {\n            // requests towards localfs\n            if (url.startsWith(localfsScheme)) {\n                return await fetchFromLocalFS(localfsScheme, url);\n            }\n            else if (origin(url) === origin(assetsURL)) {\n                // requests towards same origin\n                // only url under the assets folder are proxyied\n                if (parent(url).startsWith(assetsURL)) {\n                    const proxy = self._remoteProxy;\n                    const { body, options } = await proxy.fetch(request);\n                    return new Response(body, options);\n                }\n                throw new Error(\"Ressource is outside the proxy' scope\");\n            }\n            return await trueFetch(request);\n        }\n        catch (e) {\n            console.error(`security proxy: request to ${url} throw error: ${e.toString()}`);\n            return Response.error();\n        }\n    }\n    self.fetch = mockedFetch;\n};\n/**\n * mock Worker to support sandboxing and keep webpack compatibility\n */\nconst mockWorker = () => {\n    // already mocked?\n    if (globalThis.Worker.name === \"SandboxedWorker\")\n        return;\n    class SandboxedWorker extends Worker {\n        constructor(url, options) {\n            if (options?.sandboxed === true) {\n                const absURL = new URL(url).href;\n                const assetsURL = absURL.substring(0, absURL.lastIndexOf(\"/\"));\n                // worker created with a 'data' url scheme has opaque origin\n                // https://html.spec.whatwg.org/multipage/workers.html#script-settings-for-workers:concept-origin-opaque\n                const workerScript = `\n           self._assetsURL = \"${assetsURL}\";\n           globalThis = {importScripts: self.importScripts, location: \"${url}\"};\n           importScripts(\"${url}\");\n           globalThis = self;\n        `.replace(/\\s/g, \"\");\n                super(`data:text/javascript;base64,${btoa(workerScript)}`);\n            }\n            else {\n                super(url, options);\n            }\n        }\n    }\n    globalThis.Worker = SandboxedWorker;\n};\n/**\n * we mock '(new Image()).src' = to support local fs access\n */\nconst mockHTMLImageSrc = () => {\n    // inside main thread?\n    if (globalThis?.HTMLImageElement == null)\n        return;\n    const desc = Object.getOwnPropertyDescriptor(HTMLImageElement.prototype, \"src\");\n    // already mocked?\n    if (desc?.set?.name === \"mockedSrcSet\")\n        return;\n    function mockedSrcSet(e) {\n        const prefix = \"filesystem:/\";\n        if (e.startsWith(prefix)) {\n            const path = e.slice(prefix.length);\n            (async () => {\n                //@ts-ignore\n                const content = (await globalThis.Basthon?.getFile?.(path))?.buffer;\n                desc?.set?.call(this, await toDataURL(content));\n            })();\n        }\n        else {\n            desc?.set?.call(this, e);\n        }\n    }\n    Object.defineProperty(HTMLImageElement.prototype, \"src\", {\n        ...desc,\n        get: function () {\n            return desc?.get?.call(this);\n        },\n        set: mockedSrcSet,\n    });\n};\nexport { NotImplementedError, mockFetch, mockWorker, mockHTMLImageSrc };\n","import { PromiseDelegate } from \"promise-delegate\";\nimport { NotImplementedError, mockFetch } from \"../commons\";\nimport { wrap } from \"comlink\";\nimport { VERSION } from \"../version\";\nimport { DOMNodeBus } from \"./worker-utils\";\nclass KernelWorkerBase {\n    constructor(options) {\n        this._ready = new PromiseDelegate();\n        this._evalPromises = []; // used to wait all promises emitted during computation\n        this._decrypt = (s) => s;\n        this._options = options;\n        this._legacy = options?.legacy === true;\n        this._basthonRoot = self._assetsURL + \"/\" + VERSION + \"/\" + this.language();\n        /* we mock the fetch function to:\n         *  - redirect queries to local FS\n         *  - bypass the worker's opaque origin\n         */\n        mockFetch(this.isLegacy());\n        // useful for ffi\n        self.basthon = this;\n        // the window object is not available in a webworker...\n        if (self.window == null)\n            self.window = self;\n        // common way to create a canvas in worker and legacy mode\n        self.Canvas = !this.isLegacy()\n            ? globalThis.OffscreenCanvas\n            : function Canvas(width, height) {\n                const canvas = document.createElement(\"canvas\");\n                if (width != null)\n                    canvas.width = width;\n                if (height != null)\n                    canvas.height = height;\n                return canvas;\n            };\n        // global prompt redirected to our input\n        if (self._prompt == null)\n            self._prompt = globalThis.prompt;\n        globalThis.prompt = (p) => this.input(p);\n        // DOM node bus in legacy mode\n        // (to transfer elements from worker to main thread, they are the same!)\n        if (this.isLegacy())\n            this._domNodeBus = new DOMNodeBus();\n        // not needed anymore\n        self._assetsURL = undefined;\n    }\n    /**\n     * Language implemented in the kernel (string).\n     * Generally lower case.\n     */\n    language() {\n        throw new NotImplementedError(\"language\");\n    }\n    /**\n     * Is this a legacy worker? i.e. not runing in a worker.\n     */\n    isLegacy() {\n        return this._legacy;\n    }\n    /**\n     * The basthon's root directory.\n     */\n    basthonRoot() {\n        return this._basthonRoot;\n    }\n    /**\n     * Is synchronous communication with main thread available?\n     * (through SharedArrayBuffer atomic waits)\n     */\n    syncCommSupport() {\n        return this._sab != null;\n    }\n    /**\n     * Special case of starting a legacy kernel.\n     */\n    async legacyStart() {\n        throw new NotImplementedError(\"legacyStart\");\n    }\n    /**\n     * Special case of stoping a legacy kernel.\n     */\n    async legacyStop() {\n        throw new NotImplementedError(\"legacyStop\");\n    }\n    /**\n     * Set SharedArrayBuffer from main thread.\n     */\n    setSAB(sab) {\n        this._sab = sab;\n    }\n    /**\n     * Add a promise we should wait for during eval process.\n     */\n    addEvalPromise(promise) {\n        this._evalPromises.push(promise);\n    }\n    /*\n     * Set fallback API key and encryption pass\n     * (if SharedArrayBuffer are not available).\n     */\n    async setFallbackKeyAndPass(key, pass) {\n        this._fallbackKey = key;\n        const CryptoJS = await import(\"crypto-js\");\n        this._decrypt = (message) => CryptoJS.AES.decrypt(message, pass).toString(CryptoJS.enc.Utf8);\n    }\n    /*\n     * Initialize the kernel. Should be overloaded.\n     */\n    async _init() { }\n    /**\n     * Initialize the kernel. It is called by initWorker in KernelBase.\n     */\n    async init() {\n        try {\n            await this._init();\n            this._ready.resolve();\n        }\n        catch (error) {\n            this._ready.reject(error);\n            throw error;\n        }\n    }\n    /**\n     * Wait for the kernel to be ready.\n     */\n    ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Set communication port.\n     */\n    setCommPort(port) {\n        this.postMessage = port.postMessage.bind(port);\n        port.onmessage = (e) => this.processMainThreadMessage(e.data);\n    }\n    /**\n     * Set the comlink communication port to proxy fetch.\n     */\n    setProxyPort(port) {\n        self._remoteProxy = wrap(port);\n    }\n    /**\n     * Send stream to stdout/stderr.\n     */\n    sendStream(data, stream, text) {\n        this.postMessage?.({\n            data,\n            type: \"stream\",\n            content: { stream, text },\n        });\n    }\n    /**\n     * Send stream to stdout.\n     */\n    sendStdoutStream(data, text) {\n        this.sendStream(data, \"stdout\", text);\n    }\n    /**\n     * Send stream to stderr.\n     */\n    sendStderrStream(data, text) {\n        this.sendStream(data, \"stderr\", text);\n    }\n    async blobToDataURL(blob) {\n        return await new Promise((resolve) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.readAsDataURL(blob);\n        });\n    }\n    /**\n     * Display a blob (only png images are supported).\n     */\n    async displayBlob(blob, data) {\n        if (data == null)\n            data = this.clone(this.__eval_data__);\n        const dataURL = await this.blobToDataURL(blob);\n        const pngPrefix = \"data:image/png;base64,\";\n        if (dataURL.startsWith(pngPrefix)) {\n            const png = dataURL.slice(pngPrefix.length);\n            data[\"display_type\"] = \"multiple\";\n            data[\"content\"] = { \"image/png\": png };\n        }\n        else {\n            return;\n        }\n        this.postMessage?.({ data, type: \"display\" });\n    }\n    /**\n     * Display an element like a canvas, ... in the frontend.\n     */\n    display(element) {\n        const data = this.clone(this.__eval_data__);\n        if (globalThis.OffscreenCanvas != null &&\n            element instanceof OffscreenCanvas) {\n            this.addEvalPromise((async () => {\n                const blob = await element.convertToBlob();\n                await this.displayBlob(blob, data);\n            })());\n        }\n        else {\n            // in legacy mode, send HTML elements via DOM node bus\n            if (this.isLegacy() && element instanceof HTMLElement) {\n                data[\"display_type\"] = \"dom-node\";\n                data[\"content\"] = this._domNodeBus?.push?.(element);\n            }\n            else {\n                data[\"display_type\"] = \"multiple\";\n                data[\"content\"] = element;\n            }\n            this.postMessage?.({ data, type: \"display\" });\n        }\n    }\n    /**\n     * Clear the current output.\n     */\n    clearOutput(wait) {\n        const data = this.clone(this.__eval_data__);\n        data[\"content\"] = { wait };\n        this.postMessage?.({ data, type: \"clear_output\" });\n    }\n    /**\n     * Pop a DOM node from domNodeBus\n     * (used to transfer HTMLElement from main thread to worker thread in legacy mode)\n     */\n    popDOMNode(id) {\n        return this._domNodeBus?.pop(id);\n    }\n    /**\n     * Evaluate code and return an object with mime type keys and string value.\n     * To be overloaded.\n     */\n    async _eval(data, code) {\n        throw new NotImplementedError(\"_eval\");\n    }\n    /**\n     * Evaluate a string of code. To be called by main thread (through comlink).\n     */\n    async eval(data, code) {\n        this._evalPromises = [];\n        this.__eval_data__ = data;\n        let res;\n        try {\n            const result = await this._eval(data, code);\n            res = { data, status: \"ok\", result };\n        }\n        catch (e) {\n            const { name, stack, message } = e;\n            this.sendStderrStream(data, e.toString());\n            res = {\n                data,\n                status: \"error\",\n                error: {\n                    name: name,\n                    value: message,\n                    traceback: stack?.toString(),\n                },\n            };\n        }\n        this.postMessage?.({ type: \"eval-end\" }); // for channel syncing\n        await Promise.all(this._evalPromises);\n        return res;\n    }\n    /**\n     * Put a file on the local (emulated) filesystem.\n     */\n    putFile(filename, content) {\n        throw new NotImplementedError(\"putFile\");\n    }\n    /**\n     * Put an importable module on the local (emulated) filesystem\n     * and load dependencies.\n     */\n    putModule(filename, content) {\n        throw new NotImplementedError(\"putModule\");\n    }\n    /**\n     * Complete the submited code.\n     */\n    async complete(code) {\n        return [];\n    }\n    /**\n     * Tell wether we should wait for more code or if it can\n     * be run as is.\n     *\n     * Useful to set ps1/ps2 in console prompt.\n     */\n    async more(code) {\n        throw new NotImplementedError(\"more\");\n    }\n    /**\n     * Send a message to the main thread to download a file.\n     */\n    download(content, filename) {\n        this.postMessage?.({\n            type: \"download\",\n            content: { content, filename },\n        });\n    }\n    /**\n     * Use JSON stringify/parse to copy an object.\n     */\n    clone(data) {\n        return JSON.parse(JSON.stringify(data));\n    }\n    /**\n     * Sync sleep for a certain duration in seconds.\n     */\n    sleep(duration) {\n        duration = duration * 1000; // to milliseconds\n        if (this.syncCommSupport()) {\n            // ensure value before waiting\n            Atomics.store(new Int32Array(this._sab), 0, 0);\n            Atomics.wait(new Int32Array(this._sab), 0, 0, duration);\n            return;\n        }\n        else {\n            // default to active sleep\n            const t0 = Date.now();\n            while (Date.now() - t0 < duration)\n                ;\n        }\n    }\n    /**\n     * Decode the string contained in a SharedArrayBuffer to\n     * bypas this issue:\n     * https://github.com/whatwg/encoding/issues/172\n     */\n    decodeSharedArrayBuffer(sab) {\n        const array = new Uint8Array(sab);\n        let length = array.length;\n        for (; length > 0 && array[length - 1] === 0; length--)\n            ;\n        if (length === 0)\n            return \"\";\n        const cropped = new Uint8Array(length);\n        cropped.set(array.subarray(0, length));\n        try {\n            return new TextDecoder().decode(cropped);\n        }\n        catch (e) {\n            if (array.length === length)\n                throw new Error(\"String too long, can't decode\");\n            throw e;\n        }\n    }\n    /**\n     * Sync input that does not use the ugly prompt but send\n     * an eval.input event to the main thread and wait for the response.\n     */\n    input(prompt, password = false) {\n        const sendInput = () => {\n            const data = this.clone(this.__eval_data__);\n            this.postMessage?.({\n                type: \"input\",\n                content: { data, prompt, password },\n            });\n        };\n        if (this.syncCommSupport()) {\n            sendInput();\n            // ensure value before waiting\n            Atomics.store(new Int32Array(this._sab), 0, 0);\n            Atomics.wait(new Int32Array(this._sab), 0, 0);\n            return this.decodeSharedArrayBuffer(this._sab);\n        }\n        else if (self._prompt != null) {\n            // in legacy context, we default to js' prompt\n            return self._prompt(prompt ?? \"\") ?? \"\";\n        }\n        else {\n            sendInput();\n            const timeout = 2 * 60 * 1000; // 2 minutes\n            const tend = Date.now() + timeout;\n            // polling loop\n            while (Date.now() < tend) {\n                const request = new XMLHttpRequest();\n                request.open(\"POST\", \"https://api.basthon.fr/ephemeral\", false); // synchronous request\n                request.setRequestHeader(\"X-API-Referer\", this._basthonRoot ?? \"null\");\n                request.send(JSON.stringify({ action: \"get\", key: this._fallbackKey }));\n                if (request.status === 200)\n                    return this._decrypt(request.responseText);\n            }\n            throw new Error(\"Error using the Basthon's network API\");\n        }\n    }\n    /**\n     * Process messages from the main thread.\n     */\n    async processMainThreadMessage(msg) {\n        switch (msg.type) {\n            case \"toplevel-input\":\n                this._toplevelInputPromise?.resolve(msg.content);\n                break;\n            default: // this should not append...\n                break;\n        }\n    }\n    /**\n     * Ask for an input in the main thread and wait for the answer\n     * then return it.\n     */\n    async toplevelInput(prompt, password = false, data = undefined) {\n        this._toplevelInputPromise = new PromiseDelegate();\n        this.postMessage?.({\n            type: \"input\",\n            content: { data, prompt, password, toplevel: true },\n        });\n        const res = await this._toplevelInputPromise.promise;\n        this._toplevelInputPromise = undefined;\n        return res;\n    }\n    /**\n     * Ask main thread to go to the next breakpoint.\n     */\n    breakpointMoveOn() {\n        const data = this.clone(this.__eval_data__);\n        this.postMessage?.({ type: \"breakpoint-move-on\", content: { data } });\n    }\n    /**\n     * Create the message channel between kernel and iframe,\n     * send one port and the iframe to main thread and return the other one.\n     */\n    displayKernelIFrame(iframeHTML) {\n        const { port1, port2 } = new MessageChannel();\n        const content = { html: iframeHTML, port: port1 };\n        const display_type = \"kernel-iframe\";\n        const data = { ...this.clone(this.__eval_data__), content, display_type };\n        this.postMessage?.({ data, type: \"display\" }, [port1]);\n        return port2;\n    }\n}\nexport { KernelWorkerBase };\n","import { expose as exposeComlink } from \"comlink\";\nconst insideWorker = () => \n//@ts-ignore\ntypeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope;\nconst expose = (kwc) => {\n    if (insideWorker()) {\n        // worker\n        const listener = (msg) => {\n            if (!(msg?.data instanceof MessagePort))\n                return;\n            removeEventListener(\"message\", listener);\n            exposeComlink(kwc, msg.data);\n        };\n        addEventListener(\"message\", listener);\n    }\n    else {\n        // main thread\n        exposeComlink(kwc, self._commPort);\n        self._commPort = undefined; // no more needed\n    }\n};\n/**\n * DOM node exchanger (Bus) to bypass stringifying\n * messages between frontend and kernel that prevents DOMNode sharing.\n */\nclass DOMNodeBus extends Map {\n    /**\n     * Push an object to the bus and get back an id to later pop it.\n     */\n    push(obj) {\n        let id = 0;\n        for (; id < this.size; id++)\n            if (!this.has(id))\n                break;\n        this.set(id, obj);\n        return id;\n    }\n    /**\n     * Remove an object from the bus from its id.\n     */\n    pop(id) {\n        const res = this.get(id);\n        this.delete(id);\n        return res;\n    }\n}\n/**\n * Dynamically load a script (support main thread and worker usage).\n */\nconst loadScript = async (url) => {\n    if (globalThis.importScripts != null)\n        return importScripts(url);\n    // we are probably in main thread\n    return new Promise((resolve, reject) => {\n        const script = document.createElement(\"script\");\n        script.onload = resolve;\n        script.onerror = reject;\n        script.src = url;\n        document.head.appendChild(script);\n    });\n};\nexport { expose, DOMNodeBus, loadScript };\n"],"names":["NotImplementedError","Error","constructor","funcName","super","this","name","toDataURL","async","content","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","Blob","fetchFromLocalFS","localfsScheme","url","prefix","path","slice","length","options","status","statusText","headers","Headers","self","basthon","getFile","dataURL","mime","substring","indexOf","buffer","append","byteLength","e","Response","origin","URL","mockFetch","legacy","fetch","trueFetch","assetsURL","_assetsURL","request","init","Request","startsWith","importScripts","error","credentials","abs","href","lastIndexOf","parent","proxy","_remoteProxy","body","console","toString","mockWorker","globalThis","Worker","SandboxedWorker","sandboxed","absURL","workerScript","replace","btoa","mockHTMLImageSrc","HTMLImageElement","desc","Object","getOwnPropertyDescriptor","prototype","set","defineProperty","get","call","Basthon","KernelWorkerBase","_ready","_evalPromises","_decrypt","s","_options","_legacy","_basthonRoot","language","isLegacy","window","Canvas","width","height","canvas","document","createElement","OffscreenCanvas","_prompt","prompt","p","input","_domNodeBus","undefined","basthonRoot","syncCommSupport","_sab","legacyStart","legacyStop","setSAB","sab","addEvalPromise","promise","push","setFallbackKeyAndPass","key","pass","_fallbackKey","CryptoJS","message","AES","decrypt","enc","Utf8","_init","ready","setCommPort","port","postMessage","bind","onmessage","processMainThreadMessage","data","setProxyPort","sendStream","stream","text","type","sendStdoutStream","sendStderrStream","blobToDataURL","blob","displayBlob","clone","__eval_data__","png","pngPrefix","display","element","convertToBlob","HTMLElement","clearOutput","wait","popDOMNode","id","pop","_eval","code","eval","res","stack","value","traceback","all","putFile","filename","putModule","complete","more","download","JSON","parse","stringify","sleep","duration","Atomics","store","Int32Array","t0","Date","now","decodeSharedArrayBuffer","array","Uint8Array","cropped","subarray","TextDecoder","decode","password","sendInput","timeout","tend","XMLHttpRequest","open","setRequestHeader","send","action","responseText","msg","_toplevelInputPromise","toplevelInput","toplevel","breakpointMoveOn","displayKernelIFrame","iframeHTML","port1","port2","MessageChannel","html","display_type","expose","kwc","WorkerGlobalScope","listener","MessagePort","removeEventListener","addEventListener","_commPort","DOMNodeBus","Map","obj","size","has","delete","loadScript","script","onload","src","head","appendChild"],"sourceRoot":""}