{"version":3,"file":"assets/4069.5be4a54b345a030d713a.js","mappings":"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","sources":["webpack://@basthon/basthon-notebook/./node_modules/comlink/dist/esm/comlink.mjs","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-base/lib/worker/comlink-proxy.js","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-base/lib/worker/proxy.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import { expose } from \"comlink\";\nimport { ProxyFetch } from \"./proxy\";\nconst proxy = new ProxyFetch();\nexpose(proxy);\n","import { transfer } from \"comlink\";\n/**\n * A class for a proxy that allows a worker with opaque origin\n * to fetch assets.\n */\nexport class ProxyFetch {\n    async fetch(request, init) {\n        request = new Request(request, init);\n        const url = request.url;\n        const parentURL = (s) => s.substring(0, s.lastIndexOf(\"/\"));\n        const assetsURL = parentURL(new URL(globalThis.location.toString()).href);\n        const baseURL = parentURL(new URL(url).href);\n        if (!baseURL.startsWith(assetsURL))\n            throw new Error(`URL ${url} is outside of proxy' scope`);\n        // force credentials omition\n        if (request.credentials !== \"omit\")\n            throw new Error(\"Request tries to use credentials\");\n        const response = await globalThis.fetch(request);\n        const buffer = await response.arrayBuffer();\n        return {\n            body: transfer(buffer, [buffer]),\n            options: {\n                status: response.status,\n                statusText: response.statusText,\n                // wrong types for headers in worker...\n                // see https://github.com/microsoft/TypeScript/pull/15050/files#diff-1fe269c5fa7bcd3a57e9e6a91ce3566d3e3a5c38b21e6ff0d78ad0dd090f8d3aR24\n                // @ts-ignore\n                headers: new Map(response.headers), // Headers are not clonable\n            },\n        };\n    }\n}\n"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","proxyTransferHandler","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","ep","pendingListeners","Map","addEventListener","ev","data","id","resolver","get","delete","createProxy","wrap","transferHandlers","value","serialized","Error","isError","message","name","stack","Object","assign","globalThis","allowedOrigins","callback","origin","allowedOrigin","RegExp","test","isAllowedOrigin","console","warn","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","error","TypeError","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","set","target","isProxyReleased","Proxy","_target","unregister","unregisterProxy","clear","length","r","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","Array","prototype","concat","transferCache","transfers","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","fetch","request","init","url","Request","parentURL","s","substring","lastIndexOf","assetsURL","URL","location","href","startsWith","credentials","response","buffer","arrayBuffer","body","options","status","statusText","headers"],"sourceRoot":""}