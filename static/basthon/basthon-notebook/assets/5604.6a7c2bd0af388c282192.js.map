{"version":3,"file":"assets/5604.6a7c2bd0af388c282192.js","mappings":"2JAAO,MAAMA,EACT,WAAAC,GAAgB,CAChB,UAAMC,GAEF,MAAMC,SAAc,oEAA8BC,cAC5C,IAAIC,SAAQ,CAACC,EAASC,KACxBJ,EAAKK,qBAAuBF,EAC5BH,EAAKM,QAAUF,EACfJ,EAAKO,KAAK,IAEdC,KAAKC,MAAQT,EAEb,MAAMU,EAAUF,KAAKC,MAAME,MAAM,UAAW,SAAU,CAAC,WACvDH,KAAKI,SAAYC,GAAMH,EAAQG,EAAEC,QAAQ,OAAQ,KACrD,CACA,OAAAC,CAAQC,GACJ,OAAOA,EAAKF,QAAQ,KAAM,IAAIA,QAAQ,KAAM,GAChD,CACA,KAAAG,CAAMD,GACF,IAAIE,EAAMV,KAAKI,SAAS,eAAeI,OAEvC,OADAE,EAAMV,KAAKO,QAAQG,GACZ,MAAMA,MACjB,CACA,OAAAR,CAAQS,GAEJ,MAAMC,EAAMZ,KAAKI,SAASO,GAAML,QAAQ,KAAM,IAC9C,GAAmB,iBAARM,EACP,OAEJ,MAAMC,EAAS,CAAC,EAShB,MARI,sBAAsBC,KAAKF,GAC3BC,EAAOE,IAAMf,KAAKO,QAAQK,GACrBA,EAAII,WAAW,KACpBH,EAAOL,KAAO,QAAQI,IACjBA,EAAII,WAAW,gBACpBH,EAAOI,MAAQL,EAAIN,QAAQ,gBAAiB,IAE5CO,EAAOJ,MAAQT,KAAKS,MAAOI,EAAOL,KAAOI,GACtCC,CACX,ECrCG,MAAMK,UAAyB,KAClC,WAAA5B,CAAY6B,GAERC,MAAMD,GACNnB,KAAKqB,MAAQ,IAAIhC,CACrB,CACA,QAAAiC,GACI,MAAO,MACX,CAIA,WAAMC,GACFC,OAAOC,MAASC,GAAQC,QAAQV,MAAMS,GACtCC,QAAQC,KAAO,IAAIC,IAASF,QAAQG,OAAOD,GAC3CF,QAAQI,KAAO,IAAIF,IAASF,QAAQV,SAASY,GAC7CG,WAAWC,iBAAiB,SAAUC,GAAMP,QAAQV,MAAMiB,EAAEC,oBACtDnC,KAAKqB,MAAM9B,MACrB,CACA,WAAM6C,CAAMC,EAAM1B,GACdgB,QAAQG,IAAM,IAAID,KACd7B,KAAKsC,iBAAiBD,EAAMR,EAAKU,KAAK,KAAO,KAAK,EAEtDZ,QAAQV,MAAQ,IAAIY,KAChB7B,KAAKwC,iBAAiBH,EAAMR,EAAKU,KAAK,KAAO,KAAK,EAEtD,MAAM7B,EAAMV,KAAKqB,MAAMnB,QAAQS,GAC/B,GAAW,MAAPD,EAAJ,CAEA,GAAiB,MAAbA,EAAIO,MACJ,MAAMP,EAAIO,MAEd,OAAOwB,KAAKC,MAAMD,KAAKE,UAAU,CAC7B,aAAcjC,EAAIF,KAClB,aAAcE,EAAID,MAClB,gBAAiBC,EAAIK,MAPL,CASxB,CAIA,iBAAM6B,GAAgB,CAItB,gBAAMC,GAAe,CACrB,UAAMC,CAAKnC,GACP,OAAO,CACX,CACA,aAAMoC,CAAQC,EAAUC,GAExB,CACA,eAAMC,CAAUF,EAAUC,GAAW,GCpDzC,OAAO/B,E","sources":["webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-xcas/lib/xcas-wrap.js","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-xcas/lib/worker.js","webpack://@basthon/basthon-notebook/./node_modules/@basthon/kernel-xcas/lib/comlink-worker.js"],"sourcesContent":["export class XCASWrapper {\n    constructor() { }\n    async init() {\n        //@ts-ignore\n        const giac = (await import(\"@basthon/xcas-wasm\")).default;\n        await new Promise((resolve, reject) => {\n            giac.onRuntimeInitialized = resolve;\n            giac.onAbort = reject;\n            giac.run();\n        });\n        this._giac = giac;\n        // get eval function from c code\n        const caseval = this._giac.cwrap(\"caseval\", \"string\", [\"string\"]);\n        this._caseval = (t) => caseval(t.replace(/%22/g, '\"'));\n    }\n    unquote(text) {\n        return text.replace(/^\"/, \"\").replace(/\"$/, \"\");\n    }\n    latex(text) {\n        let res = this._caseval(`latex(quote(${text}))`);\n        res = this.unquote(res);\n        return `\\\\[${res}\\\\]`;\n    }\n    caseval(code) {\n        // eval\n        const out = this._caseval(code).replace(/;$/, \"\");\n        if (typeof out !== \"string\")\n            return;\n        // formatting\n        const result = {};\n        if (/^\"<svg .*<\\/svg>\"$/s.test(out))\n            result.svg = this.unquote(out);\n        else if (out.startsWith('\"'))\n            result.text = `text ${out}`;\n        else if (out.startsWith(\"GIAC_ERROR: \"))\n            result.error = out.replace(/^GIAC_ERROR: /, \"\");\n        else\n            result.latex = this.latex((result.text = out));\n        return result;\n    }\n}\n","import { KernelWorkerBase } from \"@basthon/kernel-base/worker\";\nimport { XCASWrapper } from \"./xcas-wrap\";\nexport class XCASKernelWorker extends KernelWorkerBase {\n    constructor(options) {\n        // do not forget to call the parent constructor\n        super(options);\n        this._xcas = new XCASWrapper();\n    }\n    language() {\n        return \"xcas\";\n    }\n    /*\n     * Initialize the kernel.\n     */\n    async _init() {\n        window.alert = (msg) => console.error(msg);\n        console.info = (...args) => console.log(...args);\n        console.warn = (...args) => console.error(...args);\n        globalThis.addEventListener(\"error\", (e) => console.error(e.toString()));\n        await this._xcas.init();\n    }\n    async _eval(data, code) {\n        console.log = (...args) => {\n            this.sendStdoutStream(data, args.join(\" \") + \"\\n\");\n        };\n        console.error = (...args) => {\n            this.sendStderrStream(data, args.join(\" \") + \"\\n\");\n        };\n        const res = this._xcas.caseval(code);\n        if (res == null)\n            return undefined;\n        if (res.error != null)\n            throw res.error;\n        // use json to remove keys of undefined value\n        return JSON.parse(JSON.stringify({\n            \"text/plain\": res.text,\n            \"text/latex\": res.latex,\n            \"image/svg+xml\": res.svg,\n        }));\n    }\n    /**\n     * Special case of starting a legacy kernel.\n     */\n    async legacyStart() { }\n    /**\n     * Special case of stoping a legacy kernel.\n     */\n    async legacyStop() { }\n    async more(code) {\n        return false;\n    }\n    async putFile(filename, content) {\n        // just ignoring this since we don't have a filesystem.\n    }\n    async putModule(filename, content) { }\n}\n","import { expose } from \"@basthon/kernel-base/worker\";\nimport { XCASKernelWorker } from \"./worker\";\nexpose(XCASKernelWorker);\n"],"names":["XCASWrapper","constructor","init","giac","default","Promise","resolve","reject","onRuntimeInitialized","onAbort","run","this","_giac","caseval","cwrap","_caseval","t","replace","unquote","text","latex","res","code","out","result","test","svg","startsWith","error","XCASKernelWorker","options","super","_xcas","language","_init","window","alert","msg","console","info","args","log","warn","globalThis","addEventListener","e","toString","_eval","data","sendStdoutStream","join","sendStderrStream","JSON","parse","stringify","legacyStart","legacyStop","more","putFile","filename","content","putModule"],"sourceRoot":""}